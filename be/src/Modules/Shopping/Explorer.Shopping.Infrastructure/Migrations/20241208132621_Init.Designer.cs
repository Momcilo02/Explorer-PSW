// <auto-generated />
using System;
using System.Collections.Generic;
using Explorer.Shopping.Core.Domain.ShoppingCarts;
using Explorer.Shopping.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Explorer.Shopping.Infrastructure.Migrations
{
    [DbContext(typeof(ShoppingContext))]
    [Migration("20241208132621_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shopping")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.Bundle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Bundles", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<int>("CouponStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Percentage")
                        .HasColumnType("bigint");

                    b.Property<List<int>>("ToursEligible")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("Coupons", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Items", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.PaymentRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ShoppingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PaymentRecords", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BundleId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.ToTable("Products", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<OrderItem>>("Items")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.ShoppingCarts.TourPurchaseToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ShoppingCartId")
                        .HasColumnType("bigint");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("UserId", "TourId")
                        .IsUnique();

                    b.ToTable("PurchaseTokens", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.TouristWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AdventureCoins")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TouristWallets", "shopping");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.Product", b =>
                {
                    b.HasOne("Explorer.Shopping.Core.Domain.Bundle", null)
                        .WithMany("Products")
                        .HasForeignKey("BundleId");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.ShoppingCarts.TourPurchaseToken", b =>
                {
                    b.HasOne("Explorer.Shopping.Core.Domain.ShoppingCarts.ShoppingCart", null)
                        .WithMany("TourPurchaseTokens")
                        .HasForeignKey("ShoppingCartId");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.Bundle", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Explorer.Shopping.Core.Domain.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("TourPurchaseTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
